
// Problem : Cats and Tree
// Contest : CodeChef - Practice(Medium)
// URL : https://www.codechef.com/problems/CATS
// Memory Limit : 256 MB
// Time Limit : 2000 ms
// Powered by CP Editor (https://github.com/cpeditor/cpeditor)

//#pragma GCC optimize "trapv"//  WA to RE int!!
#include <bits/stdc++.h>
#define FOR(i,n) for(int i=0;i<n;i++)
#define FORR(i,n) for(int i=n;i>=0;i--)
#define pb push_back
#define vlli vector<int>
#define slli set<int>
#define mlli map<int,int>
#define int long long int 
#define test int tt1234; cin>>tt1234;while(tt1234--)
#define endl "\n"
#define all(zz) zz.begin(),zz.end()
#define rep(i, begin, end) for (__typeof(end) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))
#define error(x) cerr << #x <<" is " << x << endl;
#define Error(a,b) cerr<<"( "<<#a<<" , "<<#b<<" ) = ( "<<(a)<<" , "<<(b)<<" )\n";
#define fast ios_base::sync_with_stdio(false);cin.tie(NULL);
#define fint fast;test
#define SI(a,n) int a[n];FOR(i,n) cin>>a[i];
#define input(a,n) int n;cin>>n; SI(a,n)
#define set(a,x) memset(a,x,sizeof(a))
#define L(x)	((x)<<1)
#define R(x)	(((x)<<1)+1)
#define ft first
#define se second
#define MOD 1000000007
using namespace std;
const int N=3*1e5+1;
vector<int>adj[N];
vector<bool>vis(N);
int dp[N][20];
int n;

void dfs(int node,int par)
{
	dp[node][0]=par;
	for(auto child:adj[node]){
		if(child!=par){
			dfs(child,node);
		}
	}
}

void init()
{
	for(int P=1;P<20;P++){
		for(int node=1;node<=n;node++){
			if(dp[node][P-1]!=-1){
				dp[node][P]=dp[dp[node][P-1]][P-1];
			}
		}
	}
}

void print()
{
	for(int i=1;i<=n;i++){
		cout<<i<<" => ";
		for(int j=0;j<4;j++){
			cout<<dp[i][j]<<" ";
		}
		cout<<endl;
	}
}
void solve(){
	cin>>n;
	for(int i=1;i<=n;i++)adj[i].clear(),vis[i]=false;
	for(int i=1;i<=n;i++){
		for(int j=0;j<20;j++){
			dp[i][j]=-1;
		}
	}
	
	int Root=0;
	for(int i=1;i<=n;i++)
	{
		int node;
		cin>>node;
		if(node==0)Root=i;
		else
		{
			adj[i].pb(node);
			adj[node].pb(i);
		}
	}
	
	dfs(Root,-1);
	init();

	// print();
	
	int q=n;

	while(q--)
	{
		int ans=0;
		int temp;
		cin>>temp;
		
		if(vis[temp]){
			cout<<0<<endl;
			continue;
		}
		
		for(int power=19;power>=0;power--)
		{
			if(dp[temp][power]!=-1 && vis[dp[temp][power]]==false)
			{
				ans+=1<<power;
				temp=dp[temp][power];
			}
		}
		
		vis[temp]=1;
		
		cout<<ans+1<<endl;			
	}
	
	return;	
}


int32_t main() {
    // fint{
    	fast;
    	solve();
    // }
    return 0;
}
